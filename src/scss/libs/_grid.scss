// Grid Reference
// -------------------
// column($ratios: 1, $offset: 0, $cycle: 0, $gutter: map-get($persygrid, 'gutter'));
// clearfix();

$persygrid: (gutter: 3,
  max-width: $xxl,
  layout-direction: LTR,
  parent-first: false,
  nth: child);


@function _get-column($ratios: 1, $gutter: map-get($persygrid, 'gutter')) {
  $ratios: if(not map-get($persygrid, 'parent-first'), _reverse($ratios), $ratios);
  $width: 100;

  @each $ratio in $ratios {
    $gutter: math.div($gutter, $width) * 100;
    $width: 100 * $ratio - $gutter + $ratio * $gutter;
  }

  @return $width $gutter;
}

@function _get-layout-direction() {
  $direction: if(map-get($persygrid, 'layout-direction')=='RTL', right, left);

  @return $direction;
}

@function _reverse($list) {

  // Sass 3.2
  @if function-exists('set-nth') !=true {
    $result: ();

    @for $i from length($list) * -1 through -1 {
      $result: append($result, nth($list, abs($i)));
    }

    @return $result;
  }

  // Sass 3.3
  @for $i from 1 through floor(math.div(length($list), 2))+1 {
    $tmp: nth($list, $i);
    $list: set-nth($list, $i, nth($list, -$i));
    $list: set-nth($list, -$i, $tmp);
  }

  @return $list;
}

@function _opposite-direction($direction) {
  @if $direction=='left' {
    @return right;
  }

  @else if $direction=='right' {
    @return left;
  }

  @else if $direction=='top' {
    @return bottom;
  }

  @else if $direction=='bottom' {
    @return top;
  }

  @else if index('ltr''LTR', $direction) {
    @return rtl;
  }

  @else if index('rtl''RTL', $direction) {
    @return ltr;
  }

  @else {
    @warn '`#{$direction}` is not a direction; please make sure your direction is all lowercase.';
    @return false;
  }
}

@mixin column($ratios: 1, $offset: 0, $cycle: 0, $gutter: map-get($persygrid, 'gutter'), $clearfix: true, $nth: map-get($persygrid, 'nth')) {
  $side: _get-layout-direction();
  $opposite-side: _opposite-direction($side);
  $column-widths: _get-column($ratios, $gutter);
  $margin-last: 0;
  $margin-l: $margin-last;
  $margin-r: nth($column-widths, 2);
  $nth-selector: "nth-child";

  @if $nth=="type" {
    $nth-selector: "nth-of-type";
  }

  @if $offset !=0 {
    @if $offset < 0 {
      $offset: $offset * -1;
      $offset: nth(_get-column($offset, nth($column-widths, 2)), 1);
      $margin-last: $offset + nth($column-widths, 2) * 2;
      $margin-r: $margin-last;
    }

    @else {
      $offset: nth(_get-column($offset, nth($column-widths, 2)), 1);
      $margin-l: $offset + nth($column-widths, 2);
    }
  }

  @if $clearfix {
    @include clearfix;
  }

  float: $side;
  clear: none;
  text-align: inherit;
  width: nth($column-widths, 1) * 1%;

  margin: {
    #{$side}: $margin-l * 1%;
    #{$opposite-side}: $margin-r * 1%;
  }

  ;

  @if $cycle !=0 {
    &:#{$nth-selector}(n) {
      margin-#{_opposite-direction($side)}: $margin-r * 1%;
      float: $side;
      clear: none;
    }

    &:#{$nth-selector}(#{$cycle}n) {
      margin-#{_opposite-direction($side)}: $margin-last * 1%;
      float: _opposite-direction($side);
    }

    &:#{$nth-selector}(#{$cycle}n + 1) {
      clear: both;
    }
  }

  @else {
    &:last-child {
      margin-#{_opposite-direction($side)}: $margin-last * 1%;
    }
  }
}

@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}